

def get_list_of_university_towns():
          
    #'''Returns a DataFrame of towns and the states they are in from the 
    #university_towns.txt list. 
    
    #The following cleaning needs to be done:
    #1. For "State", removing characters from "[" to the end.
    #2. For "RegionName", when applicable, removing every character from " (" to the end.
    
    df = pd.read_table('university_towns.txt', header = None)
    
    df['State'] = df.where(df[0].str.contains('edit')==True)
    df['RegionName'] = df[0].where(df[0].str.contains('edit')!=True)
    df['State'] = df['State'].fillna(method='ffill')
    
    df_1 = df[pd.notnull(df['RegionName'])]
    df_1 = df_1[['State', 'RegionName']]
    df_1['State'] = df_1['State'].str.replace("\[.*\]","")
    df_1['RegionName'] = df_1['RegionName'].str.replace(" \(.*$","")
    
    df_1.reset_index(drop=True, inplace=True)
    return df_1

def get_recession_dates():
    #'''Returns the year and quarter of the recession start time as a string value in a format such as 2005q3'''
    
    
    GDP = pd.read_excel('gdplev.xls', skiprows = 7, parse_cols = [4,6],
                    names = ['Quarter', 'gdp'])
    GDP = GDP.iloc[212:]
    GDP['diff'] = GDP['gdp'].diff()
    GDP['gdp_b'] = (GDP['diff'] > 0).astype(int)
    b = (GDP['diff'] > 0).astype(int)
    q = GDP['Quarter']
    gdp_b = pd.Series(b.values, index=q.values, name = 'gdp_b')
    
    prev = -1
    seq = []
    for ind, v in zip(gdp_b.index, gdp_b.values):
        if v == 0:
            if prev == 1 and len(seq) <= 1:
                seq = []
            seq.append(ind)
        elif v == 1:
            if len(seq) >=2:
                seq.append(ind)
                if prev == 1:
                    break
            else:
                seq = []
        prev = v
    
    
    return seq

get_recession_dates()
recession_start = seq[0]
recession_end = seq[5]
recession_bottom = seq[3]
  
  
  def convert_housing_data_to_quarters():
    #'''Converts the housing data to quarters and returns it as mean values in a dataframe. This dataframe should be a dataframe with
    #columns for 2000q1 through 2016q3, and should have a multi-index in the shape of ["State","RegionName"]. '''
    
    states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}
    
    df = pd.read_csv('City_Zhvi_AllHomes.csv')
    df['State'].replace(states, inplace = True)
    
    df = df.set_index(['State','RegionName'])
    df.drop(['RegionID', 'Metro', 'CountyName', 'SizeRank'], inplace = True, axis = 1)
    t = pd.to_datetime(df.columns.values, errors = 'coerce')
    r = pd.PeriodIndex(pd.to_datetime(t), freq = 'q')
    
    df.columns = r
    df.columns = df.columns.to_series().astype(str)
    df.columns = df.columns.str.replace('Q', 'q')
    df = df.ix[:,'2000q1':]
    
    
    return df.groupby(df.columns, axis =1).agg(np.mean)
 
 
 def run_ttest():
    '''First creates new data showing the decline or growth of housing prices between the recession start and the recession bottom. Then runs a ttest
    comparing the university town values to the non-university towns values, return whether the alternative hypothesis (that the two groups are the same)
    is true or not as well as the p-value of the confidence. 
    
    Returns a tuple (different, p, better) where different=True if the t-test is True at a p<0.01 (we reject the null hypothesis), or different=False if 
    otherwise (we cannot reject the null hypothesis). The variable p should be equal to the exact p value returned from scipy.stats.ttest_ind(). The
    value for better should be either "university town" or "non-university town"
    depending on which has a lower mean price ratio (which is equivilent to a reduced market loss).'''
    
    hd = convert_housing_data_to_quarters()
    hd['PriceRatio'] = hd['2008q2'].div(hd['2009q2'])

    hdf = hd['PriceRatio']
    
    ut = get_list_of_university_towns()
    ut_tuples = [tuple(x) for x in ut.values]
    uni_towns = hdf.loc[ut_tuples]
    uni_towns.dropna(inplace = True)
    non_uni_towns = hdf[~hdf.index.isin(ut_tuples)]
    non_uni_towns.dropna(inplace = True)
    from scipy import stats
    ans = stats.ttest_ind(uni_towns, non_uni_towns, equal_var=False)
    t = (True, ans[1],"university town" )
    
    return t

run_ttest()
